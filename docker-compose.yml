# Simple Docker Compose for SubTrack Application
version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:16-alpine
    container_name: subtrack-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: subtrack
      POSTGRES_USER: subtrack_user
      POSTGRES_PASSWORD: password123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - subtrack-network

  # Backend API Service - No volume mounting to avoid bcrypt issues
  backend:
    build:
      context: ./SubTrack-backend
      dockerfile: Dockerfile
    container_name: subtrack-backend
    restart: unless-stopped
    environment:
      # Database configuration
      PG_HOST: database
      PG_PORT: 5432
      PG_DATABASE: subtrack
      PG_USER: subtrack_user
      PG_PASSWORD: password123
      
      # Application configuration
      PORT: 3000
      NODE_ENV: development
      JWT_SECRET: your_jwt_secret_key_change_in_production
      FRONTEND_URL: http://localhost
    # NO VOLUMES - everything is built into the container
    ports:
      - "3000:3000"
    networks:
      - subtrack-network
    depends_on:
      - database

  # Frontend Web Service
  frontend:
    build:
      context: ./SubTrack-frontend
      dockerfile: Dockerfile
    container_name: subtrack-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      - subtrack-network
    depends_on:
      - backend

# Persistent data volumes
volumes:
  postgres_data:

# Network for service communication
networks:
  subtrack-network:
    driver: bridge